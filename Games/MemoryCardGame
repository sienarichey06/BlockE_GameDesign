#Siena Richey
#Memory Card Game
#Pseudocode:
#menu will have settings
#settings will have change background color 
#menu will have instructions
#menu will have exit option
#menu will display 3 different levels
#first level is 4x3, second 4x5, third 4x7, different amounts of cards for each level
#import random to shuffle cards
#create screen and define colors of game
#create a list for images for closed cards and a list for flipped
#create grid with tiles on the screen with closed card image
#each new game, cards will reshuffle in a different order
#user will click a level 
#user will click card to reveal the image and then click a second card to find the match of the image of the first card
#if the cards match when they are both flipped, they remain flipped but if they do not match they are flipped back to the original side and the user tries again until they find all of the matches
#If statement to compare flipped cards if they are equal
#2 cards clicked counts as 1 attempt
#computer will count each attempt as a score of 1 as the game is played
#game ends when user matches all cards
#user will aim for a lower score at the end of the game, a lower score is better than a high score
#end of game display score and celebration will appear




import pygame, time, random, math



#setup

WIDTH=800

HEIGHT=800

pygame.init()

screen=pygame.display.set_mode((WIDTH,HEIGHT))

pygame.display.set_caption("MEMORY FLIP GAME!")



#variables

size=100

margin=size+12

RADIUS = 20

infoy=90

infox=20

left=200

down=400

x=12

y=12

#defining images

square=pygame.image.load("Images\\backofCard.PNG")

square=pygame.transform.scale(square,(size,size))



aariz=pygame.image.load("Images\\aariz.PNG")
aariz=pygame.transform.scale(aariz,(size,size))
alex=pygame.image.load("Images\\alex.PNG")

zain=pygame.image.load("Images\\zain.PNG")

varun=pygame.image.load("Images\\varun.PNG")

devin=pygame.image.load("Images\devin.PNG")

vivaan=pygame.image.load("Images\\vivaan.PNG")

lily=pygame.image.load("Images\\lily.PNG")

michelle=pygame.image.load("Images\\michelle.PNG")

zeff=pygame.image.load("Images\\zeff.PNG")

prabath=pygame.image.load("Images\\prabath.PNG")

christine=pygame.image.load("Images\\christine.PNG")

chris=pygame.image.load("Images\\chris.PNG")

suarez=pygame.image.load("Images\suarez.PNG")

dillon=pygame.image.load("Images\\dillon.PNG")




celebration=pygame.image.load("Images\\celebration.PNG")

celebration=pygame.transform.scale(celebration,(WIDTH,HEIGHT))

mysterybackground=pygame.image.load("Images\\Mainbackground.PNG") 


#colors

white=(255,255,51)

black=(51,0,102)

blue= (204, 255, 229)

green= (74, 189, 41)

yellow= (0, 102, 204)

red= (255, 51, 153)

purple= (158, 98, 170)

npurple= (102,102,255)


#fonts

SCORE_FONT = pygame.font.SysFont('comicsans', 60)

INFO_FONT = pygame.font.SysFont('comicsansms', 19)

WIN_FONT = pygame.font.SysFont('comicsansms', 45)

STAR_FONT = pygame.font.SysFont('comicsansms', 18)

MENU_FONT = pygame.font.SysFont('comicsans', 35)

CHOICE_FONT = pygame.font.SysFont('comicsans', 45)

TITLE_FONT = pygame.font.SysFont('comicsans', 50)

BESTSCORES_FONT = pygame.font.SysFont('comicsansms', 55)



#image lists

#easy 4x4

matches1=[aariz,aariz,alex,alex,zain,zain,varun,varun,devin,devin,vivaan,vivaan,lily,lily,michelle,michelle]



#medium 4x6

matches2=[aariz,aariz,alex,alex,zain,zain,varun,varun,devin,devin,vivaan,vivaan,lily,lily,michelle,michelle,zeff,zeff,prabath,prabath,christine,christine,chris,chris]



#hard 4x7

matches3=[aariz,aariz,alex,alex,zain,zain,varun,varun,devin,devin,vivaan,vivaan,lily,lily,michelle,michelle,zeff,zeff,prabath,prabath,christine,christine,chris,chris,suarez,suarez,dillon,dillon]




#best scores

def best_scores():

    global define1, define2, define3

    runBest=True

    #screen continues showing while true

    while runBest:

        pressed=pygame.key.get_pressed()

        screen.fill(blue)

        text = TITLE_FONT.render("BEST SCORES FOR:", 1, black)

        screen.blit(text, (WIDTH/2 - text.get_width()/2, 20))

        #easy scores

        file1=open("Games\\MemoryEasy.txt","r")

        score1=file1.read()

        easy = BESTSCORES_FONT.render("Easy:  "+score1,1,green)

        file1.close()

        screen.blit(easy,(WIDTH/2 - easy.get_width()/2, 200))

        #medium scores

        file2=open("Games\\MemoryMedium.txt","r")

        score2=file2.read()

        medium = BESTSCORES_FONT.render("Medium:  "+score2,1,yellow)

        file2.close()

        screen.blit(medium,(WIDTH/2 - medium.get_width()/2, 350))

        #hard scores

        file3=open("Games\\MemoryHard.txt","r")

        score3=file3.read()

        hard = BESTSCORES_FONT.render("Hard:  "+score3,1,red)

        file3.close()

        screen.blit(hard,(WIDTH/2 - hard.get_width()/2, 500))

        #press anywhere

        text=STAR_FONT.render("Press anywhere to go back to menu.",1,black)

        screen.blit(text,(250,700))

        pygame.display.update()

        for event in pygame.event.get():

            if event.type == pygame.QUIT:

                runBest=False #window closes if "x" button is pressed

            if event.type == pygame.MOUSEBUTTONDOWN:

                runBest=False #if user pressed the mouse anywhere, screen goes to menu

                menu()


#draw screen/grid

def draw(dict):

    global score, card_statis, square

    screen.blit(mysterybackground,(0,0)) #background for all levels

    #cards to print based on difficulty

    #only if hard

    if dict==define3:

        if card_statis[0][0]==0:

            screen.blit(square,(x,y))

        else:

            pic20=pygame.transform.scale(dict["b20"],(size,size))

            screen.blit(pic20,(x,y))

        if card_statis[0][1]==0:

            screen.blit(square,(x+margin,y))

        else:

            pic21=pygame.transform.scale(dict["b21"],(size,size))

            screen.blit(pic21,(x+margin,y))

        if card_statis[0][2]==0:

            screen.blit(square,(x+margin*2,y))

        else:

            pic22=pygame.transform.scale(dict["b22"],(size,size))

            screen.blit(pic22,(x+margin*2,y))

        if card_statis[0][3]==0:

            screen.blit(square,(x+margin*3,y))

        else:

            pic23=pygame.transform.scale(dict["b23"],(size,size))

            screen.blit(pic23,(x+margin*3,y))



        if card_statis[6][0]==0:

            screen.blit(square,(x,y+margin*6))

        else:

            pic24=pygame.transform.scale(dict["b24"],(size,size))

            screen.blit(pic24,(x,y+margin*6))

        if card_statis[6][1]==0:

            screen.blit(square,(x+margin,y+margin*6))

        else:

            pic25=pygame.transform.scale(dict["b25"],(size,size))

            screen.blit(pic25,(x+margin,y+margin*6))

        if card_statis[6][2]==0:

            screen.blit(square,(x+margin*2,y+margin*6))

        else:

            pic26=pygame.transform.scale(dict["b26"],(size,size))

            screen.blit(pic26,(x+margin*2,y+margin*6))

        if card_statis[6][3]==0:

            screen.blit(square,(x+margin*3,y+margin*6))

        else:

            pic27=pygame.transform.scale(dict["b27"],(size,size))

            screen.blit(pic27,(x+margin*3,y+margin*6))


#if hard or medium

    if dict==define2 or dict==define3:

        if card_statis[1][0]==0:

            screen.blit(square,(x,y+margin))

        else:

            pic12=pygame.transform.scale(dict["b12"],(size,size))

            screen.blit(pic12,(x,y+margin))

        if card_statis[1][1]==0:

            screen.blit(square,(x+margin,y+margin))

        else:

            pic13=pygame.transform.scale(dict["b13"],(size,size))

            screen.blit(pic13,(x+margin,y+margin))

        if card_statis[1][2]==0:

            screen.blit(square,(x+margin*2,y+margin))

        else:

            pic14=pygame.transform.scale(dict["b14"],(size,size))

            screen.blit(pic14,(x+margin*2,y+margin))

        if card_statis[1][3]==0:

            screen.blit(square,(x+margin*3,y+margin))

        else:

            pic15=pygame.transform.scale(dict["b15"],(size,size))

            screen.blit(pic15,(x+margin*3,y+margin))



        if card_statis[5][0]==0:

            screen.blit(square,(x,y+margin*5))

        else:

            pic16=pygame.transform.scale(dict["b16"],(size,size))

            screen.blit(pic16,(x,y+margin*5))

        if card_statis[5][1]==0:

            screen.blit(square,(x+margin,y+margin*5))

        else:

            pic17=pygame.transform.scale(dict["b17"],(size,size))

            screen.blit(pic17,(x+margin,y+margin*5))

        if card_statis[5][2]==0:

            screen.blit(square,(x+margin*2,y+margin*5))

        else:

            pic18=pygame.transform.scale(dict["b18"],(size,size))

            screen.blit(pic18,(x+margin*2,y+margin*5))

        if card_statis[5][3]==0:

            screen.blit(square,(x+margin*3,y+margin*5))

        else:

            pic19=pygame.transform.scale(dict["b19"],(size,size))

            screen.blit(pic19,(x+margin*3,y+margin*5))

    #always print no matter what level

    if card_statis[2][0]==0:

        screen.blit(square,(x,y+margin*2))

    else:

        pic0=pygame.transform.scale(dict["b0"],(size,size))

        screen.blit(pic0,(x,y+margin*2))

    if card_statis[2][1]==0:

        screen.blit(square,(x+margin,y+margin*2))

    else:

        pic1=pygame.transform.scale(dict["b1"],(size,size))

        screen.blit(pic1,(x+margin,y+margin*2))

    if card_statis[2][2]==0:

        screen.blit(square,(x+margin*2,y+margin*2))

    else:

        pic2=pygame.transform.scale(dict["b2"],(size,size))

        screen.blit(pic2,(x+margin*2,y+margin*2))

    if card_statis[2][3]==0:

        screen.blit(square,(x+margin*3,y+margin*2))

    else:

        pic3=pygame.transform.scale(dict["b3"],(size,size))

        screen.blit(pic3,(x+margin*3,y+margin*2))



    if card_statis[3][0]==0:

        screen.blit(square,(x,y+margin*3))

    else:

        pic4=pygame.transform.scale(dict["b4"],(size,size))

        screen.blit(pic4,(x,y+margin*3))

    if card_statis[3][1]==0:

        screen.blit(square,(x+margin,y+margin*3))

    else:

        pic5=pygame.transform.scale(dict["b5"],(size,size))

        screen.blit(pic5,(x+margin,y+margin*3))

    if card_statis[3][2]==0:

        screen.blit(square,(x+margin*2,y+margin*3))

    else:

        pic6=pygame.transform.scale(dict["b6"],(size,size))

        screen.blit(pic6,(x+margin*2,y+margin*3))

    if card_statis[3][3]==0:

        screen.blit(square,(x+margin*3,y+margin*3))

    else:

        pic7=pygame.transform.scale(dict["b7"],(size,size))

        screen.blit(pic7,(x+margin*3,y+margin*3))



    if card_statis[4][0]==0:

        screen.blit(square,(x,y+margin*4))

    else:

        pic8=pygame.transform.scale(dict["b8"],(size,size))

        screen.blit(pic8,(x,y+margin*4))

    if card_statis[4][1]==0:

        screen.blit(square,(x+margin,y+margin*4))

    else:

        pic9=pygame.transform.scale(dict["b9"],(size,size))

        screen.blit(pic9,(x+margin,y+margin*4))

    if card_statis[4][2]==0:

        screen.blit(square,(x+margin*2,y+margin*4))

    else:

        pic10=pygame.transform.scale(dict["b10"],(size,size))

        screen.blit(pic10,(x+margin*2,y+margin*4))

    if card_statis[4][3]==0:

        screen.blit(square,(x+margin*3,y+margin*4))

    else:

        pic11=pygame.transform.scale(dict["b11"],(size,size))

        screen.blit(pic11,(x+margin*3,y+margin*4))



    #title and score

    text=SCORE_FONT.render("Score: "+str(score),1,white)

    screen.blit(text,(525,400))

    game=BESTSCORES_FONT.render("GREENHILL",1,white)

    screen.blit(game,(455,80))

    game=BESTSCORES_FONT.render("MEMORY",1,white)

    screen.blit(game,(493,150))

    game=BESTSCORES_FONT.render("GAME",1,white)

    screen.blit(game,(530,220))

    pygame.display.update()



#main code

def main(dict):

    global score, card_statis, square, run, runMenu, define1, define2, define3

    clicked=[] #list for images(to know if they are the same)

    tracking=[] #list for tracking place in card_statis, so if not match, cards = 0 and go to back of card

    card_statis=[[0,0,0,0],

                [0,0,0,0],

                [0,0,0,0],

                [0,0,0,0],

                [0,0,0,0],

                [0,0,0,0],

                [0,0,0,0]]



    score=0

    run=True

    draw(dict)

    count=0

    while run:

        for event in pygame.event.get():

            if event.type == pygame.QUIT:

                run = False

                runMenu=False

            if event.type == pygame.MOUSEBUTTONDOWN:

                if pygame.mouse.get_pressed() and count<2:

                    pos=pygame.mouse.get_pos()

                    pos=pos[0]//(size+x),pos[1]//(size+y)

                    #additional rows only for hard

                    if dict==define3: #following descriptions apply to all position/image statements

                        if pos[0]==0 and pos[1]==0 and card_statis[0][0]==0: #finds osition of card and can't click same card if up

                            clicked.append(dict["b20"]) #add card to list to check if two are the same

                            count+=1 #add a count to know how many cards are up

                            card_statis[0][0]=1 #makes card flip over

                            tracking.append(0) #adds place in card_statis to list, so if not a match, if will be 0 again and go to back of card

                            tracking.append(0)

                        if pos[0]==1 and pos[1]==0 and card_statis[0][1]==0:

                            clicked.append(dict["b21"])

                            count+=1

                            card_statis[0][1]=1

                            tracking.append(0)

                            tracking.append(1)

                        if pos[0]==2 and pos[1]==0 and card_statis[0][2]==0:

                            clicked.append(dict["b22"])

                            count+=1

                            card_statis[0][2]=1

                            tracking.append(0)

                            tracking.append(2)

                        if pos[0]==3 and pos[1]==0 and card_statis[0][3]==0:

                            clicked.append(dict["b23"])

                            count+=1

                            card_statis[0][3]=1

                            tracking.append(0)

                            tracking.append(3)



                        if pos[0]==0 and pos[1]==6 and card_statis[6][0]==0:

                            clicked.append(dict["b24"])

                            count+=1

                            card_statis[6][0]=1

                            tracking.append(6)

                            tracking.append(0)

                        if pos[0]==1 and pos[1]==6 and card_statis[6][1]==0:

                            clicked.append(dict["b25"])

                            count+=1

                            card_statis[6][1]=1

                            tracking.append(6)

                            tracking.append(1)

                        if pos[0]==2 and pos[1]==6 and card_statis[6][2]==0:

                            clicked.append(dict["b26"])

                            count+=1

                            card_statis[6][2]=1

                            tracking.append(6)

                            tracking.append(2)

                        if pos[0]==3 and pos[1]==6 and card_statis[6][3]==0:

                            clicked.append(dict["b27"])

                            count+=1

                            card_statis[6][3]=1

                            tracking.append(6)

                            tracking.append(3)

                    #additional rows for medium or hard

                    if dict==define2 or dict==define3:

                        if pos[0]==0 and pos[1]==1 and card_statis[1][0]==0:

                            clicked.append(dict["b12"])

                            count+=1

                            card_statis[1][0]=1

                            tracking.append(1)

                            tracking.append(0)

                        if pos[0]==1 and pos[1]==1 and card_statis[1][1]==0:

                            clicked.append(dict["b13"])

                            count+=1

                            card_statis[1][1]=1

                            tracking.append(1)

                            tracking.append(1)

                        if pos[0]==2 and pos[1]==1 and card_statis[1][2]==0:

                            clicked.append(dict["b14"])

                            count+=1

                            card_statis[1][2]=1

                            tracking.append(1)

                            tracking.append(2)

                        if pos[0]==3 and pos[1]==1 and card_statis[1][3]==0:

                            clicked.append(dict["b15"])

                            count+=1

                            card_statis[1][3]=1

                            tracking.append(1)

                            tracking.append(3)



                        if pos[0]==0 and pos[1]==5 and card_statis[5][0]==0:

                            clicked.append(dict["b16"])

                            count+=1

                            card_statis[5][0]=1

                            tracking.append(5)

                            tracking.append(0)

                        if pos[0]==1 and pos[1]==5 and card_statis[5][1]==0:

                            clicked.append(dict["b17"])

                            count+=1

                            card_statis[5][1]=1

                            tracking.append(5)

                            tracking.append(1)

                        if pos[0]==2 and pos[1]==5 and card_statis[5][2]==0:

                            clicked.append(dict["b18"])

                            count+=1

                            card_statis[5][2]=1

                            tracking.append(5)

                            tracking.append(2)

                        if pos[0]==3 and pos[1]==5 and card_statis[5][3]==0:

                            clicked.append(dict["b19"])

                            count+=1

                            card_statis[5][3]=1

                            tracking.append(5)

                            tracking.append(3)

                    #cards to always print

                    if pos[0]==0 and pos[1]==2 and card_statis[2][0]==0:

                        clicked.append(dict["b0"])

                        count+=1

                        card_statis[2][0]=1

                        tracking.append(2)

                        tracking.append(0)

                    if pos[0]==1 and pos[1]==2 and card_statis[2][1]==0:

                        clicked.append(dict["b1"])

                        count+=1

                        card_statis[2][1]=1

                        tracking.append(2)

                        tracking.append(1)

                    if pos[0]==2 and pos[1]==2 and card_statis[2][2]==0:

                        clicked.append(dict["b2"])

                        count+=1

                        card_statis[2][2]=1

                        tracking.append(2)

                        tracking.append(2)

                    if pos[0]==3 and pos[1]==2 and card_statis[2][3]==0:

                        clicked.append(dict["b3"])

                        count+=1

                        card_statis[2][3]=1

                        tracking.append(2)

                        tracking.append(3)



                    if pos[0]==0 and pos[1]==3 and card_statis[3][0]==0:

                        clicked.append(dict["b4"])

                        count+=1

                        card_statis[3][0]=1

                        tracking.append(3)

                        tracking.append(0)

                    if pos[0]==1 and pos[1]==3 and card_statis[3][1]==0:

                        clicked.append(dict["b5"])

                        count+=1

                        card_statis[3][1]=1

                        tracking.append(3)

                        tracking.append(1)

                    if pos[0]==2 and pos[1]==3 and card_statis[3][2]==0:

                        clicked.append(dict["b6"])

                        count+=1

                        card_statis[3][2]=1

                        tracking.append(3)

                        tracking.append(2)

                    if pos[0]==3 and pos[1]==3 and card_statis[3][3]==0:

                        clicked.append(dict["b7"])

                        count+=1

                        card_statis[3][3]=1

                        tracking.append(3)

                        tracking.append(3)



                    if pos[0]==0 and pos[1]==4 and card_statis[4][0]==0:

                        clicked.append(dict["b8"])

                        count+=1

                        card_statis[4][0]=1

                        tracking.append(4)

                        tracking.append(0)

                    if pos[0]==1 and pos[1]==4 and card_statis[4][1]==0:

                        clicked.append(dict["b9"])

                        count+=1

                        card_statis[4][1]=1

                        tracking.append(4)

                        tracking.append(1)

                    if pos[0]==2 and pos[1]==4 and card_statis[4][2]==0:

                        clicked.append(dict["b10"])

                        count+=1

                        card_statis[4][2]=1

                        tracking.append(4)

                        tracking.append(2)

                    if pos[0]==3 and pos[1]==4 and card_statis[4][3]==0:

                        clicked.append(dict["b11"])

                        count+=1

                        card_statis[4][3]=1

                        tracking.append(4)

                        tracking.append(3)

                    draw(dict)



                    if count==2:

                        score+=1

                        if clicked[0]==clicked[1]:

                            clicked=[]

                            count=0

                            tracking=[]

                        else:

                            clicked=[]

                            count=0

                            pygame.time.delay(900)

                            track1=tracking[0]

                            track2=tracking[1]

                            track3=tracking[2]

                            track4=tracking[3]

                            card_statis[track1][track2]=0

                            card_statis[track3][track4]=0

                            tracking=[]

                    draw(dict)

                    #how to know if user won

                    if dict==define1 and card_statis==[[0,0,0,0],[0,0,0,0],[1,1,1,1],[1,1,1,1],[1,1,1,1],[0,0,0,0],[0,0,0,0]]:

                        pygame.time.delay(700)

                        screen.blit(fireworks,(0,0)) #new background

                        win=WIN_FONT.render("Good job! Your score was "+str(score)+"!",1,blue) #tells user their score

                        screen.blit(win,(100,350))

                        file1 = open("memoryEasy.txt", "r")

                        if int(file1.read())>score:#checks if score is better than best

                            file1.close()

                            best=TITLE_FONT.render("NEW BEST SCORE!!!",1,white) #lets user know they beat score

                            screen.blit(best,(150,450))

                            file1=open("memoryEasy.txt","w") #replaces old best score with new one

                            file1.write(str(score))

                        file1.close()

                        pygame.display.update()

                        pygame.time.delay(3000)

                        menu()

                    if dict==define2 and card_statis==[[0,0,0,0],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[0,0,0,0]]:

                        pygame.time.delay(700)

                        screen.blit(fireworks,(0,0))

                        win=WIN_FONT.render("Good job! Your score was "+str(score)+"!",1,white)

                        screen.blit(win,(100,350))

                        file2 = open("memoryMedium.txt", "r")

                        if int(file2.read())>score:

                            file2.close()

                            best=TITLE_FONT.render("NEW BEST SCORE!!!",1,white)

                            screen.blit(best,(150,450))

                            file2=open("memoryMedium.txt","w")

                            file2.write(str(score))

                        file2.close()

                        pygame.display.update()

                        pygame.time.delay(3000)

                        menu()

                    if dict==define3 and card_statis==[[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]]:

                        pygame.time.delay(700)

                        screen.blit(celebration,(0,0))

                        win=WIN_FONT.render("Good job! Your score was "+str(score)+"!",1,white)

                        screen.blit(win,(100,350))

                        file3 = open("Games\\MemoryHard.txt", "r")

                        if int(file3.read())>score:

                            file3.close()

                            best=TITLE_FONT.render("NEW BEST SCORE!!!",1,white)

                            screen.blit(best,(150,450))

                            file3=open("Games\\MemoryHard.txt","w")

                            file3.write(str(score))

                        file3.close()

                        pygame.display.update()

                        pygame.time.delay(3000)

                        menu() #goes ack to menu and cycle starts again



                    pygame.display.update()



#menu

def menu():

    global run, runMenu, define1, define2, define3, matches1, matches2, matches3

    runMenu=True

    while runMenu:

        screen.fill(blue)

        text = TITLE_FONT.render("LET'S PLAY A MEMORY GAME!", 0.5, black)

        screen.blit(text, (30, 20))



        #instructions

        text = INFO_FONT.render("Once you choose your level, the selected level of cards will appear. You", 1, black)

        text2 = INFO_FONT.render("will click on one card to reveal an image, and then click another to find it's match.", 1, black)

        text3 = INFO_FONT.render("If the two images match, they will stay face up. If they do not, they will flip", 1, black)

        text4 = INFO_FONT.render("back over and you will continue selecting two cards at a time until all matches are found.", 1, black)

        text5 = INFO_FONT.render("You have found all of the matches when all of the cards are facing up. Good luck!",1,black)

        screen.blit(text, (infox, infoy))

        screen.blit(text2, (infox, infoy+3+text.get_height()))

        screen.blit(text3, (infox, infoy+8+text.get_height()*2))

        screen.blit(text4, (infox, infoy+13+text.get_height()*3))

        screen.blit(text5, (infox, infoy+18+text.get_height()*4))



        choice = CHOICE_FONT.render("SELECT A CHOICE:",1,black)

        screen.blit(choice,(infox+0, infoy+70+text.get_height()*5))

        #3 circles

        pygame.draw.circle(screen, black, (left, down), RADIUS, 3)

        pygame.draw.circle(screen, black, (left, down+RADIUS*2+20), RADIUS, 3)

        pygame.draw.circle(screen, black, (left, down+RADIUS*4+40), RADIUS, 3)

        pygame.draw.circle(screen, black, (left, down+RADIUS*6+60), RADIUS, 3)

        pygame.draw.circle(screen, black, (left, down+RADIUS*8+80), RADIUS, 3)

        pygame.draw.circle(screen, black, (left, down+RADIUS*8+135), RADIUS, 3)




        #easy

        one=MENU_FONT.render("1",1,green)

        screen.blit(one,(left-8,down-26))

        choice1=MENU_FONT.render("Easy (12)",1,green)

        screen.blit(choice1,(235,down-26))



        #medium

        two=MENU_FONT.render("2",1,yellow)

        screen.blit(two,(left-10,down+RADIUS*1.7))

        choice2=MENU_FONT.render("Meduim (20)",1,yellow)

        screen.blit(choice2,(235,down+35))



        #hard

        three=MENU_FONT.render("3",1,red)

        screen.blit(three,(left-10,down+RADIUS*4+15))

        choice3=MENU_FONT.render("Hard (28)",1,red)

        screen.blit(choice3,(235,down+95))



        #scores

        four=MENU_FONT.render("4",1,purple)

        screen.blit(four,(left-10,down+RADIUS*6+35))

        choice4=MENU_FONT.render("Best Scores*",1,purple)

        screen.blit(choice4,(235,down+155))



        #exit

        five=MENU_FONT.render("5",1,black)

        screen.blit(five,(left-10,down+RADIUS*8+55))

        choice5=MENU_FONT.render("EXIT",1,black)

        screen.blit(choice5,(235,down+215))

        #settings

        six=MENU_FONT.render("6",1,npurple)

        screen.blit(six,(left-10,down+RADIUS*8+110))

        choice6=MENU_FONT.render("Settings",1,npurple)

        screen.blit(choice6,(235,down+271))



        #how to calculate scores

        star=STAR_FONT.render("*Your score will represent the number of attempts you take to find all of the matches, so the", 1, npurple)

        star2=STAR_FONT.render(" lower the score you get, the better you played!*",1,npurple)

        screen.blit(star,(10,735))

        screen.blit(star2,(10,star.get_height()+740))



        #shuffle easy

        random.shuffle(matches1)

        define1={}

        for number in range(12):

            define1["b{0}".format(number)]=matches1[number]

        #shuffle medium

        random.shuffle(matches2)

        define2={}

        for number in range(20):

            define2["b{0}".format(number)]=matches2[number]

        #shuffle hard

        random.shuffle(matches3)

        define3={}

        for number in range(28):

            define3["b{0}".format(number)]=matches3[number]



        for event in pygame.event.get():

            if event.type == pygame.QUIT:

                runMenu=False

                run=False

            #depending on where user clicked, the screen will change

            if event.type == pygame.MOUSEBUTTONDOWN:

                m_x, m_y = pygame.mouse.get_pos()

                dis = math.sqrt((left - m_x)**2 + (down - m_y)**2)

                if dis<RADIUS:

                    main(define1) #easy pic list

                    runMenu=False

                else:

                    dis = math.sqrt((left - m_x)**2 + ((down+RADIUS*2+20) - m_y)**2)

                    if dis<RADIUS:

                        main(define2) #medium pic list

                        runMenu=False

                    else:

                        dis = math.sqrt((left - m_x)**2 + ((down+RADIUS*4+40) - m_y)**2)

                        if dis<RADIUS:

                            main(define3) #hard pic list

                            runMenu=False

                        else:

                            dis = math.sqrt((left - m_x)**2 + ((down+RADIUS*6+60) - m_y)**2)

                            if dis<RADIUS:

                                best_scores()

                                runMenu=False

                            else:

                                dis = math.sqrt((left - m_x)**2 + ((down+RADIUS*8+80) - m_y)**2)

                                if dis<RADIUS:

                                    runMenu=False

                                    run=False





        pygame.display.update()



menu() #runs menu, and therefore, everything else